#!/usr/bin/env python

"""
create the cam library
"""
import sys, os, filecmp

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.case             import Case
from CIME.utils            import run_cmd, expect
from CIME.buildlib         import parse_input
import shutil, re

logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    case = Case(caseroot)

    casebuild = case.get_value("CASEBUILD")
    casetools = case.get_value("CASETOOLS")
    gmake_j   = case.get_value("GMAKE_J")
    gmake     = case.get_value("GMAKE")
    mach      = case.get_value("MACH")

    #-------------------------------------------------------
    # create Filepath in bldroot
    #-------------------------------------------------------

    filesrc = os.path.join(casebuild, "camconf", "Filepath")
    filedst = os.path.join(bldroot, "Filepath_tmp")
    shutil.copy(filesrc,filedst)

    filedst     = os.path.join(bldroot, "Filepath")
    filedst_tmp = os.path.join(bldroot, "Filepath_tmp")
    if os.path.isfile(filedst):
        if not filecmp.cmp(filedst_tmp, filedst):
            shutil.move(filedst_tmp, filedst)
    else:
        shutil.move(filedst_tmp, filedst)

    #-------------------------------------------------------
    # build the library
    #-------------------------------------------------------

    # casebuild/camconf/CESM_cppdefs is created by the call to cam's
    # configure in buildnml

    with open(os.path.join(casebuild, "camconf", "CESM_cppdefs"), 'r') as f:
        user_cppdefs = f.readline().rstrip()

    complib  = os.path.join(libroot, "libatm.a")
    makefile = os.path.join(casetools, "Makefile")
    macfile  = os.path.join(caseroot, "Macros.%s" % mach)

    if user_cppdefs:
        cmd = "%s complib -j %d MODEL=cam COMPLIB=%s -f %s MACFILE=%s USER_CPPDEFS='%s'" \
            % (gmake, gmake_j, complib, makefile, macfile, user_cppdefs )
    else:
        cmd = "%s complib -j %d MODEL=cam COMPLIB=%s -f %s MACFILE=%s " \
            % (gmake, gmake_j, complib, makefile, macfile )
    rc, out, err = run_cmd(cmd)
    logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
    expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

###############################################################################

if __name__ == "__main__":
    _main_func()
